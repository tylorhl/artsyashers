@using System.Collections.Generic
@using Tylorhl.ArtsyAshers.Svg
@using Newtonsoft.Json
@inject HttpClient Http

<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="2.0" class="container" x="0px" y="0px" viewBox="0 0 1000 1000">
    <defs>
        @foreach (var path in SelectedPaths)
        {
            <path d="@(path.Data.ToString())" id="path@(path.Id)"/>
        }
    </defs>
    <g class="group">
        @for (int i = 0; i < PixelCount; i++)
        {
            string fill = i == 0 ? "#FF0000" : "#FFFFFF";
            <circle cx="5" cy="5" r="8" fill="@fill" id="p@(i)" class="hidden">
                @{
                    string beginvis = i != 0 ? $"p{i-1}vis.end" : "0s";
                    double nextBegin = 0;
                }
                @if(i!=0)
                {
                <animate attributeType="XML" attributeName="class" from="hidden" to="visible" begin="@(beginvis)" dur="@(PixelDistance)s" id="p@(i)vis" fill="freeze" values="hidden ; visible" keyTimes="0 ; 1"/>
                }

                @for (int j = 0; j < SelectedPaths.Count; j++)
                {
                    var path = SelectedPaths[j];
                    string id = $"p{i}m{j}";
                    double begin = nextBegin;
                    int loops = path.Transitonary ? 1 : Loops;
                    double dur = path.Transitonary ? Dur/4 : Dur;

                    if(begin == 0)
                            begin = PixelDistance*i;

                    nextBegin = begin + (dur * @loops);

                    string reloop = j == 0 ? $"; p{i}m{SelectedPaths.Count-1}.end" : "";

                    <animateMotion dur="@(dur)s" begin="@(begin)s@(reloop)" repeatCount="@loops" id="@id">
                            <mpath href="#path@(path.Id)"></mpath>
                    </animateMotion>
                }
            </circle>
        }
    </g>
</svg>

@code {
    private static List<Path> Paths;

    [Parameter] private int? Seed {get;set;}
    [Parameter] private uint PixelCount {get;set;} = 20;
    [Parameter] private uint PathCount {get;set;} = 5;
    [Parameter] private int Loops {get;set;} = 2;
    [Parameter] private double Dur {get;set;} = 5.0;
    [Parameter] private double PixelDistance {get;set;} = 0.1; // Likely to change

    public List<Path> SelectedPaths {get; private set;} = new List<Path>();

    protected override async Task OnInitAsync()
    {
        if(Paths == null)
        {
            var pathsDict = await Http.GetJsonAsync<Dictionary<string,string>>("./paths.json");
            Paths = pathsDict.Select(kvp => new Path(kvp.Value){ Id = kvp.Key }).ToList();
        }

        SelectedPaths = Paths.ToList();

        Shuffle(SelectedPaths);

        SelectedPaths = SelectedPaths.Take((int)PathCount).ToList();

        // Add transitions
        for(int i = 0; i < SelectedPaths.Count - 1; i += 2)
        {
            var current = SelectedPaths[i];
            var next = SelectedPaths[i+1];

            var newPath = new Path()
            {
                Data = next.Data - current.Data,
                Transitonary = true,
                Id = $"{current.Id}{next.Id}",
            };

            SelectedPaths.Insert(i+1, newPath);
        }
    }

    private void Shuffle(IList<Path> paths)
    {
        Random rand = null;

        if(Seed != null)
            rand = new Random((int)Seed);
        else
            rand = new Random();

        int n = paths.Count;  
        while (n > 1) {  
            n--;  
            int k = rand.Next(n + 1);  
            var value = paths[k];  
            paths[k] = paths[n];  
            paths[n] = value;  
        } 
    }
}