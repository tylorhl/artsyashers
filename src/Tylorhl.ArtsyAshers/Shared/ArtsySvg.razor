@using System.Collections.Generic
@using Tylorhl.ArtsyAshers.Svg
@using System.Drawing;
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IUriHelper UriHelper

<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="2.0" class="container" x="0px" y="0px">
    <defs>
        @foreach (var path in SelectedPaths)
        {
            <path d="@(path.Data.ToString())" id="path@(path.Id)" class="pathcomponent" />
        }
        
        @if(CombinedPath != null)
        {
            <path d="@(CombinedPath.Data.ToString())" id="combinedpath"/>
        }
    </defs>
    @if(CombinedPath != null)
    {
        <g class="group">
        @for (int i = 0; i < PixelCount; i++)
        {
            <circle cx="5" cy="5" r="@PixelR" fill="@PixelColor" id="p@(i)" class="hidden">
                @{
                    string beginvis = i != 0 ? $"p{i-1}vis.end" : "0s";
                    double nextBegin = 0;
                }

                @if(i > 0)
                {
                    <animate attributeType="XML" attributeName="class" from="hidden" to="visible" begin="@(beginvis)" dur="@(PixelDistance)s" id="p@(i)vis" fill="freeze" values="hidden ; visible" keyTimes="0 ; 1"/>
                }

                <animateMotion dur="@(CombinedPath.Duration)s" begin="@(PixelDistance*i)s" repeatCount="indefinite" id="runningAnimation" keyPoints="@KeyPoints" keyTimes="@KeyTimes" calcMode="linear">
                            <mpath href="#combinedpath"></mpath>
                    </animateMotion>
            </circle>
        }
    </g>
    }
    
    
</svg>

@code {
    private static List<Path> Paths;

    [Parameter] private int? Seed {get;set;}
    [Parameter] private uint PixelCount {get;set;} = 80;
    [Parameter] private uint PathCount {get;set;} = 10;
    [Parameter] private int PathTransitionFactor {get;set;} = 8;
    [Parameter] private int Loops {get;set;} = 2;
    [Parameter] private double Dur {get;set;} = 6.0;
    [Parameter] private double PixelDistance {get;set;} = 0.05; // Likely to change
    [Parameter] private double PixelR {get;set;} = 4;
    [Parameter] private string PixelColor {get;set;} = "#FFFFFF";
    private (float width, float height) ViewPort {get;set;}
    private Path CombinedPath = null;
    private string KeyPoints;
    private string KeyTimes;
    private int RenderPhase = 0;

    public List<Path> SelectedPaths {get; private set;} = new List<Path>();

    protected override void OnInit()
    {
        UriHelper.OnLocationChanged += OnLocationChanges;
        SetFromQuery();
    }

    private void OnLocationChanges(object sender, LocationChangedEventArgs args)
    {
        SetFromQuery();
        this.StateHasChanged();
    }

    private void SetFromQuery()
    {
        Uri uri = new Uri(UriHelper.GetAbsoluteUri());
        string values = uri.Fragment;

        values = values?.TrimStart('#') ?? uri.Query;
        var query = QueryHelpers.ParseQuery(values);

        Dur = query.TryGetValue(nameof(Dur), out var val) ? double.Parse(val.First()) : Dur;
        PixelCount = query.TryGetValue(nameof(PixelCount), out val) ? uint.Parse(val.First()) : PixelCount;
        PixelDistance = query.TryGetValue(nameof(PixelDistance), out val) ? double.Parse(val.First()) : PixelDistance;
        Seed = query.TryGetValue(nameof(Seed), out val) ? int.Parse(val.First()) : Seed;
        PixelR = query.TryGetValue(nameof(PixelR), out val) ? double.Parse(val.First()) : PixelR;
        PixelColor = query.TryGetValue(nameof(PixelColor), out val) ? val.First() : PixelColor;
    }

    private void Shuffle(IList<Path> paths, Random rand)
    {
        int n = paths.Count;  
        while (n > 1) {  
            n--;  
            int k = rand.Next(n + 1);  
            var value = paths[k];  
            paths[k] = paths[n];  
            paths[n] = value;  
        } 
    }

    protected override async Task OnAfterRenderAsync()
    {
        if(Paths == null)
        {
            var pathsDict = await Http.GetJsonAsync<Dictionary<string,string>>("./paths.json");
            Paths = pathsDict.Select(kvp => new Path(kvp.Value){ Id = kvp.Key, Duration = Dur }).ToList();
        }

        Random rand = null;

        if(Seed != null)
            rand = new Random((int)Seed);
        else
            rand = new Random();

        if(RenderPhase == 0)
        {
            ViewPort = (await JsRuntime.InvokeAsync<float>("GetViewPortWidth"), await JsRuntime.InvokeAsync<float>("GetViewPortHeight"));

            if(ViewPort.width == 0)
                return;

            SelectedPaths = Paths.ToList();

            Shuffle(SelectedPaths, rand);

            SelectedPaths = SelectedPaths.Take((int)PathCount).ToList();
            
            RenderPhase++;
            this.StateHasChanged();
        }
        else if(RenderPhase == 1)
        {
            if(SelectedPaths.Count > 1)
            {
                var heights = await JsRuntime.InvokeAsync<double[]>("GetPathHeights", null);
                var widths = await JsRuntime.InvokeAsync<double[]>("GetPathWidths", null);
                    
                // Add translations
                for(int i = 0; i < SelectedPaths.Count - 1; i++)
                {
                    var current = SelectedPaths[i];
                    var next = SelectedPaths[i+1];

                    if (i == 0)
                    {
                        current.Data.Translate(new PointF((float)rand.Next(0,(int)(ViewPort.width - widths[i])), (float)rand.Next(0,(int)(ViewPort.height - heights[i]))));
                    }

                    next.Data.Translate(new PointF((float)rand.Next(0,(int)(ViewPort.width - widths[i])), (float)rand.Next(0,(int)(ViewPort.height - heights[i]))));
                }
            }
                CombinedPath = Path.Concat(SelectedPaths.ToArray());
            
            RenderPhase++;
            this.StateHasChanged();
        }
        else if(RenderPhase == 2)
        {
            var points = await JsRuntime.InvokeAsync<double[]>("GetPathLengths", null);
            
            if(points == null || points.Length == 0)
                return;

            double currentDistance = 0;
            double currentDur = 0;
            double totalDistance = points.Sum();

            KeyPoints = "0;" + string.Join(";", points.Select(p => (currentDistance += (p/totalDistance))));
            KeyTimes = "0;" + string.Join(";", SelectedPaths.Select(p => currentDur += p.Duration/CombinedPath.Duration));

            RenderPhase++;
            this.StateHasChanged();
        }
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
    }
}